{
    "sourceFile": "MakeFile",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 11,
            "patches": [
                {
                    "date": 1747841812600,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1747845776150,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,33 +1,48 @@\n+# ----------------------------------------\n+# Hugo × Obsidian 自動変換 & プレビュー用 Makefile\n+# ----------------------------------------\n+\n+SHELL      := /bin/bash                       # bash 機能 (==, [[ ]]) を使う\n VAULT      := /Users/shibatamasayuki/masBlog/obsidian_masBlog\n HUGO_DIR   := /Users/shibatamasayuki/masBlog/hugo_masBlog\n-IMAGES_SRC := $(VAULT)/images\n+IMAGES_SRC := \"$(VAULT)/images\"\n \n-.PHONY: all convert syncimgs fixlinks serve\n+.PHONY: all convert syncimgs fixlinks serve clean\n \n all: convert syncimgs fixlinks serve\n \n+# ① Markdown を Hugo 形式へ変換\n convert:\n \tpython3 -m obsidian_to_hugo \\\n-\t\t--obsidian-vault-dir \"$(VAULT)/articles\" \\\n-\t\t--hugo-content-dir   \"$(HUGO_DIR)/content/articles\"\n+\t    --obsidian-vault-dir \"$(VAULT)/articles\" \\\n+\t    --hugo-content-dir   \"$(HUGO_DIR)/content/articles\"\n \n-# ② 画像を各記事フォルダへコピー（ページバンドル化）\n+# ② 画像を該当記事フォルダへコピー（ページバンドル化）\n+#    ・空白や日本語を含むファイル名も扱えるように read -d '' を利用\n syncimgs:\n \t@echo \"Sync images...\"\n-\t@find $(HUGO_DIR)/content/articles -name index.md | while read md ; do \\\n-\t\tdir=$$(dirname $$md) ; \\\n-\t\tfor img in $(IMAGES_SRC)/*.{png,jpg,jpeg,gif} ; do \\\n-\t\t\tbase=$$(basename $$img) ; \\\n-\t\t\tif grep -q \"$$base\" $$md ; then cp -u \"$$img\" \"$$dir/\" ; fi ; \\\n-\t\tdone ; \\\n+\t@find $(HUGO_DIR)/content/articles -name index.md -print0 | while read -d '' md; do \\\n+\t    dir=$$(dirname \"$$md\"); \\\n+\t    # 対応する画像を抽出してコピー\n+\t    while IFS= read -r -d '' img; do \\\n+\t        base=$$(basename \"$$img\"); \\\n+\t        if grep -q \"$$base\" \"$$md\"; then \\\n+\t            install -m 644 -D \"$$img\" \"$$dir/$$base\"; \\\n+\t        fi; \\\n+\t    done < <(find $(IMAGES_SRC) -maxdepth 1 -type f \\( -iname '*.png' -o -iname '*.jpg' -o -iname '*.jpeg' -o -iname '*.gif' \\) -print0); \\\n \tdone\n \n-# ③ Markdown の画像リンクを相対パスへ置換\n+# ③ ref ショートコード & /images/～ をまとめて通常リンクへ置換\n fixlinks:\n \t@echo \"Fix image links...\"\n \t@find $(HUGO_DIR)/content/articles -name index.md -exec \\\n-\t\tperl -pi -e 's!\\!\\[([^\\]]*)\\]\\([^)]+/images/([^)]*)\\)!\\!\\[$$1\\]($$2)!g' {} +\n+\t  perl -pi -e 's!\\{\\{<\\s*ref\\s+\"([^\"]+\\.(?:png|jpe?g|gif))\"\\s*>\\}}!\\!\\[\\]($$1)!g; \\\n+\t               s!\\!\\[([^\\]]*)\\]\\([^)]+/images/([^)]*)\\)!\\!\\[$$1\\]($$2)!g' {} +\n \n-# ④ プレビュー\n+# ④ ローカルプレビュー（Ctrl-C で停止）\n serve:\n \tcd $(HUGO_DIR) && hugo server -D\n+\n+# （任意）生成物クリア\n+clean:\n+\trm -rf \"$(HUGO_DIR)/public\"\n"
                },
                {
                    "date": 1747846224193,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,59 @@\n+# --------------------------------------------------------\n+#  Obsidian ➜ Hugo 自動変換 & プレビュー Makefile\n+# --------------------------------------------------------\n+\n+SHELL      := /bin/bash                     # Bash 機能を明示的に利用\n+VAULT      := /Users/shibatamasayuki/masBlog/obsidian_masBlog\n+HUGO_DIR   := /Users/shibatamasayuki/masBlog/hugo_masBlog\n+IMAGES_SRC := $(VAULT)/images              # 元画像ディレクトリ\n+\n+.PHONY: all convert syncimgs fixlinks serve clean\n+\n+# -------------------------------------------------------------------\n+# タスク一覧\n+# -------------------------------------------------------------------\n+# make            : 変換 → 画像コピー → リンク修正 → ローカルサーバ\n+# make convert    : Markdown だけ変換\n+# make syncimgs   : 画像だけ同期（記事バンドル化）\n+# make fixlinks   : 画像リンク置換\n+# make serve      : hugo server -D\n+# make clean      : public/ を削除\n+# -------------------------------------------------------------------\n+\n+all: convert syncimgs fixlinks serve\n+\n+# ① Obsidian の Markdown を Hugo 形式へ変換\n+convert:\n+\tpython3 -m obsidian_to_hugo \\\n+\t\t--obsidian-vault-dir \"$(VAULT)/articles\" \\\n+\t\t--hugo-content-dir   \"$(HUGO_DIR)/content/articles\"\n+\n+# ② 画像を該当記事フォルダ（ページバンドル）へコピー\n+syncimgs:\n+\t@echo \"Sync images...\"\n+\t@find \"$(HUGO_DIR)/content/articles\" -name index.md -print0 | \\\n+\twhile read -d '' md; do \\\n+\t\tdir=$$(dirname \"$$md\"); \\\n+\t\t# IMAGES_SRC 直下の画像を列挙し、記事内に参照があればコピー\n+\t\twhile IFS= read -r -d '' img; do \\\n+\t\t\tbase=$$(basename \"$$img\"); \\\n+\t\t\tif grep -q \"$$base\" \"$$md\"; then \\\n+\t\t\t\tinstall -m 644 -D \"$$img\" \"$$dir/$$base\"; \\\n+\t\t\tfi; \\\n+\t\tdone < <(find \"$(IMAGES_SRC)\" -maxdepth 1 -type f \\( -iname '*.png' -o -iname '*.jpg' -o -iname '*.jpeg' -o -iname '*.gif' \\) -print0); \\\n+\tdone\n+\n+# ③ `{{< ref \"...png\" >}}` や `/images/...` を通常の相対画像リンクに置換\n+fixlinks:\n+\t@echo \"Fix image links...\"\n+\t@find \"$(HUGO_DIR)/content/articles\" -name index.md -exec \\\n+\t\tperl -pi -e 's!\\{\\{<\\s*ref\\s+\"([^\"]+\\.(?:png|jpe?g|gif))\"\\s*>\\}}!\\!\\[\\]($$1)!g; \\\n+\t\t             s!\\!\\[([^\\]]*)\\]\\([^)]+/images/([^)]*)\\)!\\!\\[$$1\\]($$2)!g' {} +\n+\n+# ④ ローカルプレビュー（draft も含める）\n+serve:\n+\tcd \"$(HUGO_DIR)\" && hugo server -D\n+\n+# ⑤ 生成物削除\n+clean:\n+\trm -rf \"$(HUGO_DIR)/public\"\n"
                },
                {
                    "date": 1747847316123,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,9 +33,9 @@\n \t@echo \"Sync images...\"\n \t@find \"$(HUGO_DIR)/content/articles\" -name index.md -print0 | \\\n \twhile read -d '' md; do \\\n \t\tdir=$$(dirname \"$$md\"); \\\n-\t\t# IMAGES_SRC 直下の画像を列挙し、記事内に参照があればコピー\n+\t\t\n \t\twhile IFS= read -r -d '' img; do \\\n \t\t\tbase=$$(basename \"$$img\"); \\\n \t\t\tif grep -q \"$$base\" \"$$md\"; then \\\n \t\t\t\tinstall -m 644 -D \"$$img\" \"$$dir/$$base\"; \\\n@@ -56,52 +56,4 @@\n \n # ⑤ 生成物削除\n clean:\n \trm -rf \"$(HUGO_DIR)/public\"\n-# ----------------------------------------\n-# Hugo × Obsidian 自動変換 & プレビュー用 Makefile\n-# ----------------------------------------\n-\n-SHELL      := /bin/bash                       # bash 機能 (==, [[ ]]) を使う\n-VAULT      := /Users/shibatamasayuki/masBlog/obsidian_masBlog\n-HUGO_DIR   := /Users/shibatamasayuki/masBlog/hugo_masBlog\n-IMAGES_SRC := \"$(VAULT)/images\"\n-\n-.PHONY: all convert syncimgs fixlinks serve clean\n-\n-all: convert syncimgs fixlinks serve\n-\n-# ① Markdown を Hugo 形式へ変換\n-convert:\n-\tpython3 -m obsidian_to_hugo \\\n-\t    --obsidian-vault-dir \"$(VAULT)/articles\" \\\n-\t    --hugo-content-dir   \"$(HUGO_DIR)/content/articles\"\n-\n-# ② 画像を該当記事フォルダへコピー（ページバンドル化）\n-#    ・空白や日本語を含むファイル名も扱えるように read -d '' を利用\n-syncimgs:\n-\t@echo \"Sync images...\"\n-\t@find $(HUGO_DIR)/content/articles -name index.md -print0 | while read -d '' md; do \\\n-\t    dir=$$(dirname \"$$md\"); \\\n-\t    # 対応する画像を抽出してコピー\n-\t    while IFS= read -r -d '' img; do \\\n-\t        base=$$(basename \"$$img\"); \\\n-\t        if grep -q \"$$base\" \"$$md\"; then \\\n-\t            install -m 644 -D \"$$img\" \"$$dir/$$base\"; \\\n-\t        fi; \\\n-\t    done < <(find $(IMAGES_SRC) -maxdepth 1 -type f \\( -iname '*.png' -o -iname '*.jpg' -o -iname '*.jpeg' -o -iname '*.gif' \\) -print0); \\\n-\tdone\n-\n-# ③ ref ショートコード & /images/～ をまとめて通常リンクへ置換\n-fixlinks:\n-\t@echo \"Fix image links...\"\n-\t@find $(HUGO_DIR)/content/articles -name index.md -exec \\\n-\t  perl -pi -e 's!\\{\\{<\\s*ref\\s+\"([^\"]+\\.(?:png|jpe?g|gif))\"\\s*>\\}}!\\!\\[\\]($$1)!g; \\\n-\t               s!\\!\\[([^\\]]*)\\]\\([^)]+/images/([^)]*)\\)!\\!\\[$$1\\]($$2)!g' {} +\n-\n-# ④ ローカルプレビュー（Ctrl-C で停止）\n-serve:\n-\tcd $(HUGO_DIR) && hugo server -D\n-\n-# （任意）生成物クリア\n-clean:\n-\trm -rf \"$(HUGO_DIR)/public\"\n"
                },
                {
                    "date": 1747847348392,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,59 +1,54 @@\n # --------------------------------------------------------\n #  Obsidian ➜ Hugo 自動変換 & プレビュー Makefile\n # --------------------------------------------------------\n+.ONESHELL:                       # ← レシピを１つの Bash で実行\n+SHELL      := /bin/bash -eu      # -e: エラー即終了  -u: 未定義変数で落とす\n \n-SHELL      := /bin/bash                     # Bash 機能を明示的に利用\n VAULT      := /Users/shibatamasayuki/masBlog/obsidian_masBlog\n HUGO_DIR   := /Users/shibatamasayuki/masBlog/hugo_masBlog\n-IMAGES_SRC := $(VAULT)/images              # 元画像ディレクトリ\n+IMAGES_SRC := $(VAULT)/images\n \n .PHONY: all convert syncimgs fixlinks serve clean\n \n-# -------------------------------------------------------------------\n-# タスク一覧\n-# -------------------------------------------------------------------\n-# make            : 変換 → 画像コピー → リンク修正 → ローカルサーバ\n-# make convert    : Markdown だけ変換\n-# make syncimgs   : 画像だけ同期（記事バンドル化）\n-# make fixlinks   : 画像リンク置換\n-# make serve      : hugo server -D\n-# make clean      : public/ を削除\n-# -------------------------------------------------------------------\n+all: convert syncimgs fixlinks serve   # デフォルト\n \n-all: convert syncimgs fixlinks serve\n-\n-# ① Obsidian の Markdown を Hugo 形式へ変換\n+# ① Obsidian Markdown を Hugo に変換\n convert:\n \tpython3 -m obsidian_to_hugo \\\n \t\t--obsidian-vault-dir \"$(VAULT)/articles\" \\\n \t\t--hugo-content-dir   \"$(HUGO_DIR)/content/articles\"\n \n-# ② 画像を該当記事フォルダ（ページバンドル）へコピー\n+# ② 画像をページバンドルへコピー\n syncimgs:\n-\t@echo \"Sync images...\"\n-\t@find \"$(HUGO_DIR)/content/articles\" -name index.md -print0 | \\\n-\twhile read -d '' md; do \\\n-\t\tdir=$$(dirname \"$$md\"); \\\n-\t\t\n-\t\twhile IFS= read -r -d '' img; do \\\n-\t\t\tbase=$$(basename \"$$img\"); \\\n-\t\t\tif grep -q \"$$base\" \"$$md\"; then \\\n-\t\t\t\tinstall -m 644 -D \"$$img\" \"$$dir/$$base\"; \\\n-\t\t\tfi; \\\n-\t\tdone < <(find \"$(IMAGES_SRC)\" -maxdepth 1 -type f \\( -iname '*.png' -o -iname '*.jpg' -o -iname '*.jpeg' -o -iname '*.gif' \\) -print0); \\\n+\techo \"Sync images…\"\n+\t# すべての index.md を NULL 区切りで列挙\n+\tfind \"$(HUGO_DIR)/content/articles\" -name index.md -print0 |\n+\twhile IFS= read -r -d '' md; do\n+\t\tdir=\"$(dirname \"$$md\")\"           # 記事フォルダ\n+\t\t# IMAGES_SRC 直下の画像を列挙（NULL 区切り）\n+\t\tfind \"$(IMAGES_SRC)\" -maxdepth 1 -type f \\\n+\t\t     \\( -iname '*.png' -o -iname '*.jpg' -o -iname '*.jpeg' -o -iname '*.gif' \\) -print0 |\n+\t\twhile IFS= read -r -d '' img; do\n+\t\t\tbase=\"$(basename \"$$img\")\"\n+\t\t\t# index.md に画像名が含まれていればコピー\n+\t\t\tif grep -q \"$$base\" \"$$md\"; then\n+\t\t\t\tinstall -m 644 -D \"$$img\" \"$$dir/$$base\"   # mkdir+cp 一発 :contentReference[oaicite:2]{index=2}\n+\t\t\tfi\n+\t\tdone\n \tdone\n \n-# ③ `{{< ref \"...png\" >}}` や `/images/...` を通常の相対画像リンクに置換\n+# ③ 画像リンクを通常の Markdown へ統一\n fixlinks:\n-\t@echo \"Fix image links...\"\n-\t@find \"$(HUGO_DIR)/content/articles\" -name index.md -exec \\\n+\techo \"Fix image links…\"\n+\tfind \"$(HUGO_DIR)/content/articles\" -name index.md -exec \\\n \t\tperl -pi -e 's!\\{\\{<\\s*ref\\s+\"([^\"]+\\.(?:png|jpe?g|gif))\"\\s*>\\}}!\\!\\[\\]($$1)!g; \\\n \t\t             s!\\!\\[([^\\]]*)\\]\\([^)]+/images/([^)]*)\\)!\\!\\[$$1\\]($$2)!g' {} +\n \n-# ④ ローカルプレビュー（draft も含める）\n+# ④ ローカルプレビュー\n serve:\n-\tcd \"$(HUGO_DIR)\" && hugo server -D\n+\tcd \"$(HUGO_DIR)\"\n+\thugo server -D\n \n-# ⑤ 生成物削除\n+# ⑤ 出力フォルダの掃除\n clean:\n \trm -rf \"$(HUGO_DIR)/public\"\n"
                },
                {
                    "date": 1747847367607,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,18 +20,15 @@\n \n # ② 画像をページバンドルへコピー\n syncimgs:\n \techo \"Sync images…\"\n-\t# すべての index.md を NULL 区切りで列挙\n \tfind \"$(HUGO_DIR)/content/articles\" -name index.md -print0 |\n \twhile IFS= read -r -d '' md; do\n-\t\tdir=\"$(dirname \"$$md\")\"           # 記事フォルダ\n-\t\t# IMAGES_SRC 直下の画像を列挙（NULL 区切り）\n+\t\tdir=\"$(dirname \"$$md\")\"\n \t\tfind \"$(IMAGES_SRC)\" -maxdepth 1 -type f \\\n \t\t     \\( -iname '*.png' -o -iname '*.jpg' -o -iname '*.jpeg' -o -iname '*.gif' \\) -print0 |\n \t\twhile IFS= read -r -d '' img; do\n \t\t\tbase=\"$(basename \"$$img\")\"\n-\t\t\t# index.md に画像名が含まれていればコピー\n \t\t\tif grep -q \"$$base\" \"$$md\"; then\n \t\t\t\tinstall -m 644 -D \"$$img\" \"$$dir/$$base\"   # mkdir+cp 一発 :contentReference[oaicite:2]{index=2}\n \t\t\tfi\n \t\tdone\n"
                },
                {
                    "date": 1747847378675,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,9 +9,9 @@\n IMAGES_SRC := $(VAULT)/images\n \n .PHONY: all convert syncimgs fixlinks serve clean\n \n-all: convert syncimgs fixlinks serve   # デフォルト\n+all: convert syncimgs fixlinks serve   \n \n # ① Obsidian Markdown を Hugo に変換\n convert:\n \tpython3 -m obsidian_to_hugo \\\n"
                },
                {
                    "date": 1747847402938,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,9 +9,9 @@\n IMAGES_SRC := $(VAULT)/images\n \n .PHONY: all convert syncimgs fixlinks serve clean\n \n-all: convert syncimgs fixlinks serve   \n+all: convert syncimgs fixlinks serve\n \n # ① Obsidian Markdown を Hugo に変換\n convert:\n \tpython3 -m obsidian_to_hugo \\\n@@ -24,9 +24,9 @@\n \tfind \"$(HUGO_DIR)/content/articles\" -name index.md -print0 |\n \twhile IFS= read -r -d '' md; do\n \t\tdir=\"$(dirname \"$$md\")\"\n \t\tfind \"$(IMAGES_SRC)\" -maxdepth 1 -type f \\\n-\t\t     \\( -iname '*.png' -o -iname '*.jpg' -o -iname '*.jpeg' -o -iname '*.gif' \\) -print0 |\n+\t\t\\( -iname '*.png' -o -iname '*.jpg' -o -iname '*.jpeg' -o -iname '*.gif' \\) -print0 |\n \t\twhile IFS= read -r -d '' img; do\n \t\t\tbase=\"$(basename \"$$img\")\"\n \t\t\tif grep -q \"$$base\" \"$$md\"; then\n \t\t\t\tinstall -m 644 -D \"$$img\" \"$$dir/$$base\"   # mkdir+cp 一発 :contentReference[oaicite:2]{index=2}\n"
                },
                {
                    "date": 1747847417930,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,9 +28,9 @@\n \t\t\\( -iname '*.png' -o -iname '*.jpg' -o -iname '*.jpeg' -o -iname '*.gif' \\) -print0 |\n \t\twhile IFS= read -r -d '' img; do\n \t\t\tbase=\"$(basename \"$$img\")\"\n \t\t\tif grep -q \"$$base\" \"$$md\"; then\n-\t\t\t\tinstall -m 644 -D \"$$img\" \"$$dir/$$base\"   # mkdir+cp 一発 :contentReference[oaicite:2]{index=2}\n+\t\t\t\tinstall -m 644 -D \"$$img\" \"$$dir/$$base\":contentReference[oaicite:2]{index=2}\n \t\t\tfi\n \t\tdone\n \tdone\n \n"
                },
                {
                    "date": 1747847510850,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,51 +1,48 @@\n-# --------------------------------------------------------\n-#  Obsidian ➜ Hugo 自動変換 & プレビュー Makefile\n-# --------------------------------------------------------\n-.ONESHELL:                       # ← レシピを１つの Bash で実行\n-SHELL      := /bin/bash -eu      # -e: エラー即終了  -u: 未定義変数で落とす\n+# ----------------------------------------\n+# Hugo × Obsidian 自動変換 & プレビュー用 Makefile\n+# ----------------------------------------\n \n+SHELL      := /bin/bash                       # bash 機能 (==, [[ ]]) を使う\n VAULT      := /Users/shibatamasayuki/masBlog/obsidian_masBlog\n HUGO_DIR   := /Users/shibatamasayuki/masBlog/hugo_masBlog\n-IMAGES_SRC := $(VAULT)/images\n+IMAGES_SRC := \"$(VAULT)/images\"\n \n .PHONY: all convert syncimgs fixlinks serve clean\n \n all: convert syncimgs fixlinks serve\n \n-# ① Obsidian Markdown を Hugo に変換\n+# ① Markdown を Hugo 形式へ変換\n convert:\n \tpython3 -m obsidian_to_hugo \\\n-\t\t--obsidian-vault-dir \"$(VAULT)/articles\" \\\n-\t\t--hugo-content-dir   \"$(HUGO_DIR)/content/articles\"\n+\t    --obsidian-vault-dir \"$(VAULT)/articles\" \\\n+\t    --hugo-content-dir   \"$(HUGO_DIR)/content/articles\"\n \n-# ② 画像をページバンドルへコピー\n+# ② 画像を該当記事フォルダへコピー（ページバンドル化）\n+#    ・空白や日本語を含むファイル名も扱えるように read -d '' を利用\n syncimgs:\n-\techo \"Sync images…\"\n-\tfind \"$(HUGO_DIR)/content/articles\" -name index.md -print0 |\n-\twhile IFS= read -r -d '' md; do\n-\t\tdir=\"$(dirname \"$$md\")\"\n-\t\tfind \"$(IMAGES_SRC)\" -maxdepth 1 -type f \\\n-\t\t\\( -iname '*.png' -o -iname '*.jpg' -o -iname '*.jpeg' -o -iname '*.gif' \\) -print0 |\n-\t\twhile IFS= read -r -d '' img; do\n-\t\t\tbase=\"$(basename \"$$img\")\"\n-\t\t\tif grep -q \"$$base\" \"$$md\"; then\n-\t\t\t\tinstall -m 644 -D \"$$img\" \"$$dir/$$base\":contentReference[oaicite:2]{index=2}\n-\t\t\tfi\n-\t\tdone\n+\t@echo \"Sync images...\"\n+\t@find $(HUGO_DIR)/content/articles -name index.md -print0 | while read -d '' md; do \\\n+\t    dir=$$(dirname \"$$md\"); \\\n+\t    # 対応する画像を抽出してコピー\n+\t    while IFS= read -r -d '' img; do \\\n+\t        base=$$(basename \"$$img\"); \\\n+\t        if grep -q \"$$base\" \"$$md\"; then \\\n+\t            install -m 644 -D \"$$img\" \"$$dir/$$base\"; \\\n+\t        fi; \\\n+\t    done < <(find $(IMAGES_SRC) -maxdepth 1 -type f \\( -iname '*.png' -o -iname '*.jpg' -o -iname '*.jpeg' -o -iname '*.gif' \\) -print0); \\\n \tdone\n \n-# ③ 画像リンクを通常の Markdown へ統一\n+# ③ ref ショートコード & /images/～ をまとめて通常リンクへ置換\n fixlinks:\n-\techo \"Fix image links…\"\n-\tfind \"$(HUGO_DIR)/content/articles\" -name index.md -exec \\\n-\t\tperl -pi -e 's!\\{\\{<\\s*ref\\s+\"([^\"]+\\.(?:png|jpe?g|gif))\"\\s*>\\}}!\\!\\[\\]($$1)!g; \\\n-\t\t             s!\\!\\[([^\\]]*)\\]\\([^)]+/images/([^)]*)\\)!\\!\\[$$1\\]($$2)!g' {} +\n+\t@echo \"Fix image links...\"\n+\t@find $(HUGO_DIR)/content/articles -name index.md -exec \\\n+\t  perl -pi -e 's!\\{\\{<\\s*ref\\s+\"([^\"]+\\.(?:png|jpe?g|gif))\"\\s*>\\}}!\\!\\[\\]($$1)!g; \\\n+\t               s!\\!\\[([^\\]]*)\\]\\([^)]+/images/([^)]*)\\)!\\!\\[$$1\\]($$2)!g' {} +\n \n-# ④ ローカルプレビュー\n+# ④ ローカルプレビュー（Ctrl-C で停止）\n serve:\n-\tcd \"$(HUGO_DIR)\"\n-\thugo server -D\n+\tcd $(HUGO_DIR) && hugo server -D\n \n-# ⑤ 出力フォルダの掃除\n+# （任意）生成物クリア\n clean:\n \trm -rf \"$(HUGO_DIR)/public\"\n"
                },
                {
                    "date": 1747847967919,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,48 +1,33 @@\n-# ----------------------------------------\n-# Hugo × Obsidian 自動変換 & プレビュー用 Makefile\n-# ----------------------------------------\n+SHELL := /bin/bash -eu\n \n-SHELL      := /bin/bash                       # bash 機能 (==, [[ ]]) を使う\n-VAULT      := /Users/shibatamasayuki/masBlog/obsidian_masBlog\n-HUGO_DIR   := /Users/shibatamasayuki/masBlog/hugo_masBlog\n-IMAGES_SRC := \"$(VAULT)/images\"\n+VAULT := /Users/shibatamasayuki/masBlog/obsidian_masBlog\n+HUGO_DIR := /Users/shibatamasayuki/masBlog/hugo_masBlog\n+IMAGES_SRC := $(VAULT)/images\n \n .PHONY: all convert syncimgs fixlinks serve clean\n-\n all: convert syncimgs fixlinks serve\n \n-# ① Markdown を Hugo 形式へ変換\n convert:\n-\tpython3 -m obsidian_to_hugo \\\n-\t    --obsidian-vault-dir \"$(VAULT)/articles\" \\\n-\t    --hugo-content-dir   \"$(HUGO_DIR)/content/articles\"\n+\tpython3 -m obsidian_to_hugo --obsidian-vault-dir \"$(VAULT)/articles\" --hugo-content-dir \"$(HUGO_DIR)/content/articles\"\n \n-# ② 画像を該当記事フォルダへコピー（ページバンドル化）\n-#    ・空白や日本語を含むファイル名も扱えるように read -d '' を利用\n syncimgs:\n \t@echo \"Sync images...\"\n-\t@find $(HUGO_DIR)/content/articles -name index.md -print0 | while read -d '' md; do \\\n-\t    dir=$$(dirname \"$$md\"); \\\n-\t    # 対応する画像を抽出してコピー\n-\t    while IFS= read -r -d '' img; do \\\n-\t        base=$$(basename \"$$img\"); \\\n-\t        if grep -q \"$$base\" \"$$md\"; then \\\n-\t            install -m 644 -D \"$$img\" \"$$dir/$$base\"; \\\n-\t        fi; \\\n-\t    done < <(find $(IMAGES_SRC) -maxdepth 1 -type f \\( -iname '*.png' -o -iname '*.jpg' -o -iname '*.jpeg' -o -iname '*.gif' \\) -print0); \\\n+\t@find \"$(HUGO_DIR)/content/articles\" -name index.md -print0 | while IFS= read -r -d '' md; do \\\n+\t\tdir=$$(dirname \"$$md\"); \\\n+\t\tfind \"$(IMAGES_SRC)\" -maxdepth 1 -type f \\( -iname '*.png' -o -iname '*.jpg' -o -iname '*.jpeg' -o -iname '*.gif' \\) -print0 | while IFS= read -r -d '' img; do \\\n+\t\t\tbase=$$(basename \"$$img\"); \\\n+\t\t\tif grep -q \"$$base\" \"$$md\"; then \\\n+\t\t\t\tmkdir -p \"$$dir\"; \\\n+\t\t\t\tcp -p \"$$img\" \"$$dir/$$base\"; \\\n+\t\t\tfi; \\\n+\t\tdone; \\\n \tdone\n \n-# ③ ref ショートコード & /images/～ をまとめて通常リンクへ置換\n fixlinks:\n-\t@echo \"Fix image links...\"\n-\t@find $(HUGO_DIR)/content/articles -name index.md -exec \\\n-\t  perl -pi -e 's!\\{\\{<\\s*ref\\s+\"([^\"]+\\.(?:png|jpe?g|gif))\"\\s*>\\}}!\\!\\[\\]($$1)!g; \\\n-\t               s!\\!\\[([^\\]]*)\\]\\([^)]+/images/([^)]*)\\)!\\!\\[$$1\\]($$2)!g' {} +\n+\t@find \"$(HUGO_DIR)/content/articles\" -name index.md -exec perl -pi -e 's!\\{\\{<\\s*ref\\s+\"([^\"]+\\.(?:png|jpe?g|gif))\"\\s*>\\}}!\\!\\[\\]($$1)!g; s!\\!\\[([^\\]]*)\\]\\([^)]+/images/([^)]*)\\)!\\!\\[$$1\\]($$2)!g' {} +\n \n-# ④ ローカルプレビュー（Ctrl-C で停止）\n serve:\n-\tcd $(HUGO_DIR) && hugo server -D\n+\tcd \"$(HUGO_DIR)\" && hugo server -D\n \n-# （任意）生成物クリア\n clean:\n \trm -rf \"$(HUGO_DIR)/public\"\n"
                },
                {
                    "date": 1747848449461,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,6 +28,6 @@\n \n serve:\n \tcd \"$(HUGO_DIR)\" && hugo server -D\n \n-clean:\n-\trm -rf \"$(HUGO_DIR)/public\"\n+# clean:\n+# \trm -rf \"$(HUGO_DIR)/public\"\n\\ No newline at end of file\n"
                }
            ],
            "date": 1747841812600,
            "name": "Commit-0",
            "content": "VAULT      := /Users/shibatamasayuki/masBlog/obsidian_masBlog\nHUGO_DIR   := /Users/shibatamasayuki/masBlog/hugo_masBlog\nIMAGES_SRC := $(VAULT)/images\n\n.PHONY: all convert syncimgs fixlinks serve\n\nall: convert syncimgs fixlinks serve\n\nconvert:\n\tpython3 -m obsidian_to_hugo \\\n\t\t--obsidian-vault-dir \"$(VAULT)/articles\" \\\n\t\t--hugo-content-dir   \"$(HUGO_DIR)/content/articles\"\n\n# ② 画像を各記事フォルダへコピー（ページバンドル化）\nsyncimgs:\n\t@echo \"Sync images...\"\n\t@find $(HUGO_DIR)/content/articles -name index.md | while read md ; do \\\n\t\tdir=$$(dirname $$md) ; \\\n\t\tfor img in $(IMAGES_SRC)/*.{png,jpg,jpeg,gif} ; do \\\n\t\t\tbase=$$(basename $$img) ; \\\n\t\t\tif grep -q \"$$base\" $$md ; then cp -u \"$$img\" \"$$dir/\" ; fi ; \\\n\t\tdone ; \\\n\tdone\n\n# ③ Markdown の画像リンクを相対パスへ置換\nfixlinks:\n\t@echo \"Fix image links...\"\n\t@find $(HUGO_DIR)/content/articles -name index.md -exec \\\n\t\tperl -pi -e 's!\\!\\[([^\\]]*)\\]\\([^)]+/images/([^)]*)\\)!\\!\\[$$1\\]($$2)!g' {} +\n\n# ④ プレビュー\nserve:\n\tcd $(HUGO_DIR) && hugo server -D\n"
        }
    ]
}